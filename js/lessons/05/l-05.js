/**
 * Вивчення JavaScript
 * Урок 5. Теми:
 * - Вирази
 * - Оператори
 *
 * Щоб завантажити урок у Шелл:
 * Core.Load('../../lessons/05/l-05.js');
 */

'use strict';

//
// Вирази
//

// Вираз — це фраза на мові JavaScript, яка може бути обчислена
// інтерпретатором для отримання значення.
// Найпростіші вирази — це літерали або імена змінних, наприклад:

// Числовий літерал:
0, 1.7, -3, 0.001;

// Рядковий літерал:
'';
'JavaScript is fun!';

// Логічний літерал:
true;
false;

// Літерал значення Null:
null;

// Літерал регулярного виразу:
// /a/

// Об'єктний літерал:
// Найпростіший:
{}
// Не такий простий:
// {	x: 2, 	y: 2, 	z: 0 }

// Літерал масиву:
// Найпростіший:
[];

// Не такий простий:
[2,3,5,7,11,13,17,19];

// Функціональний літерал:
function pow (x) { return x * x; }

//
// Складні вирази
//

var i = 0;


// Шляхом об'єднання простих виразів можуть створюватися складніші, наприклад:
1 + 17; // 18
i + 17; // 17
var sum = i + 17; // undefined

// Значення цього виразу (1 + 17) визначається шляхом додавання значень двох простіших виразів (1 та 17).
// Знак + в цьому прикладі - це оператор, який об'єднує два вирази в один більш складний.
// Іншим оператором є - - (мінус), об'єднуючий вираження шляхом віднімання. Наприклад:

//
// Оператори
//

//
// Арифметичні оператори
//

//
// Додавання (+)
//

// Оператор «плюс» складає числові операнди або виконує конкатенацію рядків.
// Якщо одним з операндів є рядок, другий операнд перетворюється в рядок і виконується конкатенація.

// Операнди-об'єкти перетворяться в числа або рядки, які можуть бути складені (або конкатеновані).

// Перетворення виконується за допомогою методів valueOf() та/або toString().

0.1 + 0.2; // 0.30000000000000004

0.6 + 0.7; // 1.2999999999999998

//
// Віднімання (-)
//

// Коли «мінус» використовується в якості двомісного оператора,
// він виконує віднімання другого операнда з першого.
// Якщо вказані нечислові операнди, то оператор намагається перетворити їх в числа.

10 - 5; //
'10' - '5'; // Число 5, а не рядок
// Трюк для перетворення рядка '1001' на число 1001:
'1001' - 0; // 1001

//
// Множення (*)
//

// Оператор * перемножує два свої операнди. Нечислові операнди він намагається перетворити в числа.

2 * 3; // 6
'2' * '3'; // 6
// Трюк для перетворення рядка '6' на число 6:
'6' * 1; // 6

//
// Ділення (/)
//

// Оператор / ділить перший операнд на другий.
// Нечислові операнди він намагається перетворити в числа.
// У JavaScript всі числа дійсні, тому результатом будь-якого ділення є значення з плаваючою крапкою.

// Результат ділення на нуль дає плюс чи мінус нескінченність, а 0/0 дає NaN.

2 / 2; // 1.0
'4' / '2'; // 2
10/0; // +Infinity
-10/0; // -Infinity
0/0;

//
// Ділення по модулю (%)
//

// Оператор % обчислює залишок, від при цілочисленного ділення першого операнда на другий.
// Якщо задано нечислові операнди, то оператор намагається перетворити їх в числа.
// Знак результату збігається зі знаком першого операнду, наприклад

var modulo = 5 % 2; //  1
modulo = 5 % 3; //  2
modulo = -5 % 2; // -1
modulo = 14 % 4; // 2

// Оператор ділення по модулю зазвичай застосовується до цілих операндів,
// але працює і для дійсних значень.
// Наприклад, -4.3 % 2.1 дає результат -0.1.

//
// Унарний мінус (-)
//

// Коли мінус використовується як унарний оператора, він вказується перед єдиним операндом і

-1;

// Коли мінус використовується як унарний оператора, він вказується перед єдиним операндом і
// виконує унарна операцію зміни знака. Іншими словами, він перетворює позитивне значення в негативне,
// і навпаки. Якщо операнд не є числом, цей оператор намагається перетворити його в число.

var b = 10;
var a = -b;
Core.Print(a);
Core.Print(b);

//
// Унарний плюс (+)
//

// Для симетрії з оператором «унарний мінус» в JavaScript також є оператор «унарний плюс».
// За допомогою цього оператора можна явно задати знак числових літералів,
// якщо ви вважаєте, що це зробить текст програми більш зрозумілим:

var p = 1000;
var pp = +1000;

var myNumberFromString = +'10';
myNumberFromString;

// У такому коді оператор «плюс» нічого не робить; результатом його роботи є значення його аргументу.
// Однак нечислові аргументи він перетворює в числа.
// Якщо аргумент не може бути перетворений, повертається NaN.

+'12'; // 12
+'12Z'; // NaN

//
// Інкремент (++)
//
// Цей оператор інкрементує, тобто збільшує на одиницю свій єдиний операнд, який має бути змінною,
// елементом масиву або властивістю об'єкта. Якщо операнд не є числом, оператор спочатку намагається
// перетворити його в число.

// Посфіксна форма оператора ++
// c - counter
var c = 0;
c++; // 0
c; // 1

// 1. с => 0
// 2. с = с + 1;

// Точна поведінка цього оператора залежить від його положення по відношенню до операнда.
// Якщо поставити його перед операндом (префіксний оператор інкремента),
// то до операнду додається 1, а результатом є збільшене значення операнда.

// Префіксна форма: Pre-increment
// ++i;

var i = 0;
++i; // 1
i; // 1

// Якщо ж він розміщується після операнда (постфіксний оператор інкремента),
// то до операнду додається 1, проте результатом є первинне значення операнда.
// Якщо збільшуване значення не є числом, воно в процесі обчислення перетворюється в число.

// Post-increment
// i++;

// Наприклад, наступний код робить змінні i та j рівними 2:

var j;

i = 1;
j = ++i; // 2

// А цей встановлює i в 2, а j в 1:

i = 1;
j = i++; // 1

// ... і тільки зараз j буде дорівнювати новому значенню i
j = i; // 2


//
// Декремент (--)
//

// Цей оператор декрементує (тобто зменшує на 1) свій єдиний числовий операнд,
// який може бути змінною, елементом масиву або властивістю об'єкта.
// Якщо операнд не є числом, оператор спочатку намагається перетворити його в число.
// Як і для оператора ++, точна поведінка оператора - залежить від його положення щодо операнда.
// Будучи поставленим перед операндом, він зменшує операнд і повертає зменшене значення,
// після операнда — зменшує операнд, але повертає первинне значення.

var k = 10;
var z = k--; // z іще має старе значення k (10)
// z = k; // і тільки зараз z буде дорівнювати новому значенню k ( 9 )

// Інкремент проти декремент, префіксний проти постфіксного
// с++ | ++c
// ---------
// c-- | --c


//
// Рядкові оператори
//

// "Стрічка, строка чи рядок"?

// "Стрічкові оператори" - About 45 results (0.38 seconds)
// https://www.google.com.ua/search?q=%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8&oq=%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8&aqs=chrome..69i57.191j0j1&sourceid=chrome&ie=UTF-8#q=%22%D0%A1%D1%82%D1%80%D1%96%D1%87%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8%22

// "Строкові оператори" - About 108 results (0.48 seconds)
// https://www.google.com.ua/search?q=%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8&oq=%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8&aqs=chrome..69i57.191j0j1&sourceid=chrome&ie=UTF-8#q=%22%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8%22

// "Рядкові оператори" - About 126 results (0.37 seconds)
// https://www.google.com.ua/search?q=%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8&oq=%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8&aqs=chrome..69i57.191j0j1&sourceid=chrome&ie=UTF-8#q=%22%D0%A0%D1%8F%D0%B4%D0%BA%D0%BE%D0%B2%D1%96+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B8%22


//
// Оператор конкатенації рядків (+)
//

// Оператор + додає, тобто виконує конкатенацію двох строкових операндів.
// Іншими словами: створює новий рядок, що складається з першого рядка,
// за яким слідує другий рядок, третій і т.д..
// Так, наступний вираз дорівнює рядку 'hello there':

var helloThere = 'hello' + ' ' + 'there'; // 'hello  there'

// Наступні інструкції дають в результаті рядок '22':

var a = '2';
var b = '2';
helloThere = a + b; // 22

// Оператори <, <=, > і >= порівнюють два рядки і визначають,
// в якому порядку вони слідують один за одним.

// Порівняння засноване на алфавітному порядку, який базується на використовуваній
// у JavaScript кодуванні Unicode. У цьому кодуванні всі прописні букви латинського алфавіту
// йдуть раніше, ніж усі малі літери (прописні «менше» рядкових), що може призводити до
// несподіваних результатів. Оператор + особливий, оскільки дає пріоритет
// строковим операндам перед числовими.

// 'a' > 'b'
false;
// 'a' > 'B'
true;

// Якщо один з операндів оператора + являє собою рядок
// (або об'єкт), то інший операнд перетворюється в рядок (або обидва операнда перетворюються в рядки)
// і операнди конкатенуються, а не складаються. Наприклад:

var result = 1 + 2; // Додавання. Результат дорівнює 3.
result = '1' + '2'; // Конкатенація. Результат дорівнює '12'.
result = '1' + 2; // Конкатенація; 2 перетвориться в '2'. Результат дорівнює '12'.
result = 2 + '1'; // Конкатенація, = 21
result = 1 + '2'; // Конкатенація, 12

result = 11 < 3; // Чисельне порівняння. Результат дорівнює false.
result = '11' < '3'; // Порівняння рядків. Результат дорівнює true.

//
// Логічні оператори
//

//
// Логічне І (&&) And
//

// При використанні з логічними операндами оператор && виконує операцію
// логічного І над двома значеннями:
// він повертає true тоді і тільки тоді, коли перший і другий операнди рівні true.
// Якщо один або обидва операнда дорівнюють false, оператор повертає false.

var lessonRecorded = true;
var lessonHomeworkMade = true;

result = lessonRecorded && lessonHomeworkMade; // true

// Rost:

// Логічне АБО (||)
// При використанні з логічними операндами оператор || виконує операцію «Логічне АБО»
// над двома значеннями:
// він повертає true, якщо перший або другий операнд (або обидва операнда) дорівнюють true.
// Якщо обидва операнда дорівнюють false, він повертає false.

var petroIsRegisteredInSecuritySystem = false;
var petroCarIsInTheGarage = false;
var petroInOffice = petroCarIsInTheGarage || petroIsRegisteredInSecuritySystem; // false

var time = '11:00';

if ( time === '11:00' || time === '23:00' ) {
	Core.Print('it\'s eleven');
}

//
// Логічне НЕ (!)
//

// Оператор інвертує значення свого операнда.
// Так, якщо змінна а має значення true (або є значенням, яке перетворюється на true),
// то вираз !a має значення false. І якщо вираз p && q дорівнює false, то вираз !(p && q)
// дорівнює true.

// Зверніть увагу, що можна перетворити значення будь-якого типу в логічне,
// застосувавши цей оператор двічі: !!x.

result = !true; // false
result = !result; // true
result = !!result; // true;

var x = 0;
result = !!x; // false

!!NaN; // false
!!0; // false
!!1; // true
!!-1; // true


//
// Оператор присвоювання (=)
//

// Для присвоювання значення змінній в JavaScript використовується символ =. Наприклад:

result = !!''; // false
result = !!'s'; // true

// У JavaScript можна не розглядати такий рядок як вираз, що дає результат, але це дійсно
// вираз і формально знак = є оператором.

// Лівим операндом оператора = повинна бути змінна, елемент масиву або властивість об'єкта.
// Правим операндом може бути будь-яке значення будь-якого типу.

// Значенням оператора присвоювання
// є значення правого операнду. Оскільки = є оператором, його можна включати в більш складні вирази.
// Так, в одному виразі можна поєднати операції присвоювання і перевірки значення:

var result = ++i;


//
// Присвоєння з операцією:
//

//
// +=
//
var a = 20;
var b = 10;
a = a + b;
a += b; // a = a + b

// -=
a = a - b;
a -= b; // a = a – b

// *=
// a = a * b
a *= b; // a = a * b

// /=
// a = a / b
a /= b; // a = a / b

// %=
// a = a % b
a %= b;	// a = a % b




//
// Домашня робота:
//

Core.Print('\nLesson 05 - Homework');

Core.Print('\nTask 5.1');
// (1 бал)
// TODO: пишіть свій код тут:

// Перечитайте розділ про вирази даного уроку. Напишіть приклади літералів нижче:

// Число:

// Рядок:

// Логічний літерал:

// Літерал регулярного виразу:

// Об'єкт:

// Масив:



Core.Print('\nTask 5.2');
// (2 бали)
// TODO: пишіть свій код тут:

// Випишіть з наведених нижче прикладів "неправильні" літерали, окремо для кожного типу:

// Число:
0, NaN, -1, '-1', -'1', +Infinity, new Number();

// Рядок:
'true', 'string', new String(), '1'

// Логічний літерал:
true, 'true', 1, false, 'false', 0, new Boolean();

// Об'єкт:
new Object(), { name: 'petro', title: 'pan' }, ['1', '2', '3'], new Array();

// Масив:
[1,2,3], {}, '[]', new Array()


Core.Print('\nTask 5.3');
// (1 бал)
// Перечитайте розділ про оператори даного уроку. Напишіть 4 вирази — по одному для:

// Оператора інкременту у префіксній формі:

// Оператора інкременту у постфіксній формі:

// Оператора декременту у префіксній формі:

// Оператора декременту у постфіксній формі:



Core.Print('\nTask 5.4');
// (2 бали)
// Завдання виконувати, інтерпретуючи код самотужки, без комп'ютера:
// Яке значення буде мати змінна b після виконання коду нижче?
// А яке значення після виконання буде мати змінна с?
var a = 0;
// TODO: пишіть тут:
var b = a++;
// TODO: пишіть тут:
var c = ++a;



Core.Print('\nTask 5.5');
// (2 бали)
// Завдання виконувати, інтерпретуючи код самотужки, без комп'ютера:
// Яке значення буде мати змінна val1 після виконання коду нижче?
// А яке значення буде мати змінна val1?
// І яке — змінна val3?
// А яке значення буде у val4?
var val1 = 0 + 1;
// TODO: пишіть тут:
var val2 = 0 - 1;
// TODO: пишіть тут:
var val3 = 0 + '1';
// TODO: пишіть тут:
var val3 = 0 - '1';

Core.Print('\nTask 5.6');
// (3 бали)
// Завдання виконувати, інтерпретуючи код самотужки, без комп'ютера:
// Які значення будуть давати наведені нижче вирази у результаті обчислення?
// Чи можете ви пояснити результат?
// Пишіть відповіді у кожному рядку після слова TODO:

// &&
true && true;	// TODO:
true && false;	// TODO:
false && true;	// TODO:
false && false;	// TODO:

// ||
true || true;	// TODO:
true || false;	// TODO:
false || true;	// TODO:
false || false;	// TODO:

// !
!true	// TODO:
!!true	// TODO:
!false	// TODO:
!!false	// TODO:

// +
0 + true;	// TODO:
1 + true;	// TODO:
'0' + true;	// TODO:
'1' + true;	// TODO:

true + true 	// TODO:
true + false	// TODO:
false + true	// TODO:
false + false	// TODO:

// -
0 - true;	// TODO:
1 - true;	// TODO:
'0' - true;	// TODO:
'1' - true;	// TODO:

true - true 	// TODO:
true - false	// TODO:
false - true	// TODO:
false - false	// TODO:

// *
0 * true;	// TODO:
1 * true;	// TODO:
'0' * true;	// TODO:
'1' * true;	// TODO:

true * true 	// TODO:
true * false	// TODO:
false * true	// TODO:
false * false	// TODO:

// /
0 / true;	// TODO:
1 / true;	// TODO:
'0' / true;	// TODO:
'1' / true;	// TODO:

true / true 	// TODO:
true / false	// TODO:
false / true	// TODO:
false / false	// TODO:

// ???
'0' / false	// TODO:
'1' / false	// TODO:


Core.Print('\nTask 5.7');
// (3 бали)
// Напишіть функцію divisableByThreeOrFive, яка використовую оператор ділення по модулю для того, щоб визначити,
// чи ділиться число націло на 3 або 5, і повертає true, якщо число ділиться і на 3, і на 5.

// TODO: пишіть свій код тут:


Core.Print('\nLesson 05 - Homework End');
